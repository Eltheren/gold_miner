
module control(
    input clk,
    input resetn,
    input go_x,
    input go_y,
    input go_type,
    input draw_done,
    output reg  ld_x, ld_y, ld_type, start_draw
    );

    reg [4:0] current_state, next_state; 
    
    localparam  S_LOAD_X          = 5'd0,
                S_LOAD_X_WAIT     = 5'd1,
                S_LOAD_Y          = 5'd2,
                S_LOAD_Y_WAIT     = 5'd3,
                S_LOAD_TYPE    	  = 5'd4,
		S_LOAD_TYPE_WAIT  = 5'd5,
                S_DRAW            = 5'd6;
		
    
    // Next state logic aka our state table
    always@(*)
    begin: state_table 
            case (current_state)
                S_LOAD_X: next_state = go_x ? S_LOAD_X_WAIT : S_LOAD_X; // Loop in current state until value is input

                S_LOAD_X_WAIT: next_state = go_x ? S_LOAD_X_WAIT : S_LOAD_Y; // Loop in current state until go signal goes low
                
		S_LOAD_Y: next_state = go_y ? S_LOAD_Y_WAIT : S_LOAD_Y; // Loop in current state until value is input
                
		S_LOAD_Y_WAIT: next_state = go_y ? S_LOAD_Y_WAIT : S_LOAD_TYPE; // Loop in current state until go signal goes low
		
		S_LOAD_TYPE: next_state = go_type ? S_LOAD_TYPE_WAIT : S_LOAD_TYPE;
		
		S_LOAD_TYPE_WAIT: next_state = go_type ? S_LOAD_TYPE_WAIT : S_DRAW;
		
		S_DRAW: next_state = draw_done ? S_LOAD_X : S_DRAW;

            default:   next_state = S_LOAD_X;
        endcase
    end // state_table
   

    // Output logic aka all of our datapath control signals
    always @(*)
    begin: enable_signals
        // By default make all our signals 0
        ld_x = 1'b0;
        ld_y = 1'b0;
        ld_type = 1'b0;
	start_draw = 1'b0;


        case (current_state)
            S_LOAD_X: ld_x = 1'b1;

            S_LOAD_Y: ld_y = 1'b1;
	    
	    S_LOAD_TYPE: ld_type = 1'b1;

	    S_DRAW : start_draw = 1'b1;
		 
		

        // default:    // don't need default since we already made sure all of our outputs were assigned a value at the start of the always block
        endcase
    end // enable_signals
   
    // current_state registers
    always@(posedge clk)
    begin: state_FFs
        if(!resetn)
            current_state <= S_LOAD_X;
        else
            current_state <= next_state;
    end // state_FFS
endmodule

