
module move_hook_control(
		input clk,
    		input resetn,
    		input start_move_hook, 
    		input draw_object_done,
		output reg erase_move_hook,    //singal for erasing hook at current location, need to take background colour
    		output reg start_draw_hook,
    		output reg [8:0] hook_x_start,
    		output reg [7:0] hook_y_start
		);
    
    reg decrement = 1'b0;
    wire enable_counter_move_hook, enable_next_state;
    reg [8:0] x_current = 9'd146;
    reg [7:0] y_current = 8'd40;

    counter_move_hook(.clk(clk),
		      .enable_my_counter(enable_counter_move_hook),
		      .enable_next(enable_next_state)
		     );

    reg [4:0] current_state, next_state; 
    
    localparam  
		S_WAIT_FOR_COMMAND		= 5'd1,
		S_ERASE				= 5'd2,
		S_WAIT				= 5'd3,
		S_UPDATE_FLIP			= 5'd4,
		S_UPDATE_POSITION		= 5'd5,
		S_DRAW				= 5'd6;	


    // Next state logic aka our state table
    always@(*)
    begin: state_table 
           case (current_state)
                S_WAIT_FOR_COMMAND: next_state = start_move_hook? S_ERASE: S_WAIT_FOR_COMMAND;
		S_ERASE: next_state = draw_object_done? S_WAIT: S_ERASE;
		S_WAIT: next_state = enable_next_state? S_UPDATE_FLIP: S_WAIT;
		S_UPDATE_FLIP: next_state = S_UPDATE_POSITION;
		S_UPDATE_POSITION: next_state = S_DRAW;
		S_DRAW: next_state = draw_object_done? S_WAIT_FOR_COMMAND: S_DRAW;

            default:     next_state = S_WAIT_FOR_COMMAND;
        endcase
    end // state_table
   

    // Output logic aka all of our datapath control signals
    always @(*)
    begin: enable_signals
        // By default make all our signals 0
		start_draw_hook = 0;
    		hook_x_start = 9'b0;
    		hook_y_start = 8'b0;
		erase_move_hook = 1'b0;


        case (current_state)
		S_WAIT_FOR_COMMAND: begin
			x_current = 9'd146;
    			y_current = 8'd40;
			decrement = 1'b0;
		end

		S_ERASE: begin 
			hook_x_start = x_current;
			hook_y_start = y_current;
			start_draw_hook = 1'b1;
			erase_move_hook = 1'b1;
		end

		S_WAIT: begin
			x_current = x_current;
			y_current = y_current;
			decrement = decrement;
		end

		S_UPDATE_FLIP: begin
			if(x_current == 9'd0 || x_current == 9'd303) 
				decrement = ~decrement;
			else 
				decrement = decrement;
		end

		S_UPDATE_POSITION: begin
			if (!decrement)
			x_current = x_current + counter_flip;
			else
			x_current = x_current 
		end

		S_DRAW: begin
			hook_x_start = x_current;
			hook_y_start = y_current;
			start_draw_hook = 1'b1;
			erase_move_hook = 1'b0;
		end
		
        default: begin 
		x_current = 9'd146;
    		y_current = 8'd40;
		decrement = 1'b0;
        endcase
    end // enable_signals
   
    // current_state registers
    always@(posedge clk)
    begin: state_FFs
        if(!resetn)
            current_state <= S_WAIT_FOR_COMMAND;
        else
            current_state <= next_state;
    end // state_FFS
endmodule

