
module gold_miner
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
		KEY,
		SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input		CLOCK_50;					//	50 MHz
	input 	[9:0] 	SW;
	input 	[3:0] 	KEY;
	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	wire resetn;
	assign resetn = KEY[0];

	wire go_x;
	assign go_x = ~KEY[3];
	
	wire go_y;
	assign go_y = ~KEY[2];

	wire go_type;
	assign go_type = ~KEY[1];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [5:0] colour;
	wire [8:0] x;
	wire [7:0] y;
	wire [8:0] x_start;
	wire [7:0] y_start;
	wire writeEn;
	wire object_type;

	// control signals
	wire ld_x, ld_y, ld_type, start_draw, draw_done;
	
	// ouput control signals
	control c0 (.clk(CLOCK_50),
    		    .resetn(resetn),
		    .go_x(go_x),
    		    .go_y(go_y),
		    .go_type(go_type),
		    .ld_x(ld_x), 
		    .ld_y(ld_y),
		    .ld_type(ld_type),
		    .start_draw(start_draw),
		    .draw_done(draw_done)
		    );

	datapath d0(
    		    .clk(CLOCK_50),
    		    .resetn(resetn),
		    .data(SW[8:0]),
		    .ld_x(ld_x), 
		    .ld_y(ld_y), 
		    .ld_type(ld_type),
		    .object_type(object_type),
//		    .x(x),
//		    .y(y),
		    .x_start(x_start),
		    .y_start(y_start)
    		    );

	draw_object d1 (
		   .clock(CLOCK_50), 
		   .resetn(resetn), 
		   .start_draw(start_draw),
		   .object_type(object_type),
		   .x_start(x_start),
		   .y_start(y_start),
		   .x(x),
		   .y(y),
		   .colour(colour),
		   .draw_done(draw_done),
		   .writeEn(writeEn)
		   );


	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "320x240";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 2;
		defparam VGA.BACKGROUND_IMAGE = "finalbg.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
	
	
endmodule
